/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 13:46:11 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.ServiceRequestCallsResource;
import org.demo.entity.ServiceRequestCalls;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import java.util.Date;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class ServiceRequestCallsControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;


	private static final Date DATETIMEOFCALL = java.sql.Timestamp.valueOf("2001-05-21 01:46:52");

	private static final String OTHERDETAILS = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final Integer CONTACTID = Integer.valueOf(100);

	private static final Integer CHARGECODE = Integer.valueOf(100);

	private static final Integer STATUSCODE = Integer.valueOf(100);

	private static final Integer PROBLEMCODE = Integer.valueOf(100);

	@Test
	public void createServiceRequestCallsTest() {
		// Create an serviceRequestCalls
		ServiceRequestCalls serviceRequestCalls = createMocKServiceRequestCalls(Integer.valueOf(100) , DATETIMEOFCALL, OTHERDETAILS, CONTACTID, CHARGECODE, STATUSCODE, PROBLEMCODE);
		// Recover this serviceRequestCalls
		ResponseEntity<ServiceRequestCallsResource> result = this.restTemplate.getForEntity("/serviceRequestCalls/1", ServiceRequestCallsResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/serviceRequestCalls/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getOtherDetails()).isEqualTo(OTHERDETAILS);
		assertThat(result.getBody().getContactId()).isEqualTo(CONTACTID);
		assertThat(result.getBody().getChargeCode()).isEqualTo(CHARGECODE);
		assertThat(result.getBody().getStatusCode()).isEqualTo(STATUSCODE);
		assertThat(result.getBody().getProblemCode()).isEqualTo(PROBLEMCODE);
		// Try to create the same serviceRequestCalls, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/serviceRequestCalls", serviceRequestCalls, ServiceRequestCallsResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an serviceRequestCalls and assert field
		ServiceRequestCalls serviceRequestCalls = createMocKServiceRequestCalls(Integer.valueOf(100)  , DATETIMEOFCALL, OTHERDETAILS, CONTACTID, CHARGECODE, STATUSCODE, PROBLEMCODE);
		// Recover this serviceRequestCalls
		ResponseEntity<ServiceRequestCallsResource> result = this.restTemplate.getForEntity("/serviceRequestCalls/1", ServiceRequestCallsResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/serviceRequestCalls/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getOtherDetails()).isEqualTo(OTHERDETAILS);
		assertThat(result.getBody().getContactId()).isEqualTo(CONTACTID);
		assertThat(result.getBody().getChargeCode()).isEqualTo(CHARGECODE);
		assertThat(result.getBody().getStatusCode()).isEqualTo(STATUSCODE);
		assertThat(result.getBody().getProblemCode()).isEqualTo(PROBLEMCODE);

		// Change field value


		serviceRequestCalls.setOtherDetails("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		serviceRequestCalls.setContactId(Integer.valueOf(200));

		serviceRequestCalls.setChargeCode(Integer.valueOf(200));

		serviceRequestCalls.setStatusCode(Integer.valueOf(200));

		serviceRequestCalls.setProblemCode(Integer.valueOf(200));
		// Process update
		RequestEntity<ServiceRequestCalls> request = new RequestEntity<ServiceRequestCalls>(serviceRequestCalls, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/serviceRequestCalls/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the serviceRequestCalls and ensure field are correct
		result = this.restTemplate.getForEntity("/serviceRequestCalls/1", ServiceRequestCallsResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/serviceRequestCalls/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);


		assertThat(result.getBody().getOtherDetails()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getContactId()).isEqualTo(Integer.valueOf(200));

		assertThat(result.getBody().getChargeCode()).isEqualTo(Integer.valueOf(200));

		assertThat(result.getBody().getStatusCode()).isEqualTo(Integer.valueOf(200));

		assertThat(result.getBody().getProblemCode()).isEqualTo(Integer.valueOf(200));
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<ServiceRequestCalls> request = new RequestEntity<ServiceRequestCalls>(new ServiceRequestCalls(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/serviceRequestCalls/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an serviceRequestCalls
		createMocKServiceRequestCalls(Integer.valueOf(100)  , DATETIMEOFCALL, OTHERDETAILS, CONTACTID, CHARGECODE, STATUSCODE, PROBLEMCODE);
		// Recover this serviceRequestCalls and test if all is ok
		ResponseEntity<ServiceRequestCallsResource> result = this.restTemplate.getForEntity("/serviceRequestCalls/1", ServiceRequestCallsResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the serviceRequestCalls
		RequestEntity<ServiceRequestCalls> request = new RequestEntity<ServiceRequestCalls>(new ServiceRequestCalls(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/serviceRequestCalls/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the serviceRequestCalls and ensure it's don't exist
		// Recover this serviceRequestCalls and test if all is ok
		result = this.restTemplate.getForEntity("/serviceRequestCalls/1", ServiceRequestCallsResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the serviceRequestCalls
		RequestEntity<ServiceRequestCalls> request = new RequestEntity<ServiceRequestCalls>(new ServiceRequestCalls(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/serviceRequestCalls/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getServiceRequestCallssTest() {
		// First call assert no element
		ResponseEntity<PagedResources<ServiceRequestCallsResource>> result = this.search("/serviceRequestCalls");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<ServiceRequestCallsResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 serviceRequestCalls
		for (int i = 1; i < 22; i++) {
			createMocKServiceRequestCalls(new Integer((int)i), new Date(),String.valueOf(i),CONTACTID + i,CHARGECODE + i,STATUSCODE + i,PROBLEMCODE + i);
		}
		result = this.search("/serviceRequestCalls");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/serviceRequestCalls?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getServiceRequestCallssTestFilter() {
		// Create an serviceRequestCalls
		ServiceRequestCalls serviceRequestCalls = createMocKServiceRequestCalls(Integer.valueOf(100) , DATETIMEOFCALL, OTHERDETAILS, CONTACTID, CHARGECODE, STATUSCODE, PROBLEMCODE);
		RequestEntity<ServiceRequestCalls> request = null;
		ResponseEntity<PagedResources<ServiceRequestCallsResource>> result = null;
		PagedResources<ServiceRequestCallsResource> page = null;
		// Test otherDetails filter
		// Set the value on entity and update
		serviceRequestCalls.setOtherDetails("c");
		// Process update
		request = new RequestEntity<ServiceRequestCalls>(serviceRequestCalls, HttpMethod.PUT, null);
		this.restTemplate.exchange("/serviceRequestCalls/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test otherDetails filter
		result = this.search("/serviceRequestCalls?size=20&otherDetails=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ServiceRequestCallsResource serviceRequestCallsResource : page.getContent()) {
			assertThat(serviceRequestCallsResource.getOtherDetails()).startsWith("c");
		}
	}

	private ServiceRequestCalls createMocKServiceRequestCalls(Integer callId, Date dateTimeOfCall, String otherDetails, Integer contactId, Integer chargeCode, Integer statusCode, Integer problemCode) {
		ServiceRequestCalls serviceRequestCallsMock = new ServiceRequestCalls();
		serviceRequestCallsMock.setCallId(callId);
		serviceRequestCallsMock.setDateTimeOfCall(dateTimeOfCall);
		serviceRequestCallsMock.setOtherDetails(otherDetails);
		serviceRequestCallsMock.setContactId(contactId);
		serviceRequestCallsMock.setChargeCode(chargeCode);
		serviceRequestCallsMock.setStatusCode(statusCode);
		serviceRequestCallsMock.setProblemCode(problemCode);
		this.restTemplate.postForLocation("/serviceRequestCalls", serviceRequestCallsMock);
		return serviceRequestCallsMock;
	}

	private ResponseEntity<PagedResources<ServiceRequestCallsResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<ServiceRequestCallsResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<ServiceRequestCallsResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}